//-----------------------------------------------------------------------------
//  Copyright (C) 2025, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <algorithm>
#include <vector>
#include <cmath>
#include <type_traits>
#include <ranges>
#include <tuple>
#include <numeric>
#include <stdexcept>
#include <concepts>
#include <numbers>
#include <utility>
#include "../util/gberror.h"

namespace gb::yadro::algorithm
{
    //--------------------------------------------------------------------------------------------
    // Function to compute mean and standard deviation
    template <std::ranges::sized_range Sequence>
        requires requires(typename Sequence::value_type t) { { static_cast<double>(t) }; }
    std::pair<double, double> mean_stddev(const Sequence& data) 
    {
        size_t n = data.size();
        if (n == 0) return { 0.0, 0.0 };

        auto [sum, sum_sq] = std::accumulate(data.begin(), data.end(), std::pair{ 0.0, 0.0 },
            [](auto acc, auto value) {
                auto val = static_cast<double>(value);
                return std::pair{ acc.first + val, acc.second + val * val };
            });

        auto mean = sum / n;
        auto variance = sum_sq / n - mean * mean;
        auto stddev = std::sqrt(variance);

        return { mean, stddev };
    }

    //--------------------------------------------------------------------------------------------
    // Kolmogorov-Smirnov test function return KS statistic and p-value
    template <std::ranges::random_access_range Sequence1, std::ranges::random_access_range Sequence2>
    std::pair<double, double> kolmogorov_smirnov_test(const Sequence1& sample1, const Sequence2& sample2)
        requires requires(typename Sequence1::value_type t, typename Sequence2::value_type u) { { t <= u } -> std::convertible_to<bool>; }
    {
        auto computeECDF = [](const auto& data) {
            using value_type = typename std::remove_cvref_t<decltype(data)>::value_type;
            std::vector<value_type> sorted_data(data.begin(), data.end());
            std::sort(sorted_data.begin(), sorted_data.end());

            auto n = sorted_data.size();
            std::vector<std::pair<value_type, double>> ecdf(n);
            
            for (size_t index = 0; auto& [value, cdf] : ecdf) {
                value = sorted_data[index];
                cdf = (1. + index) / n;
                ++index;
            }
            
            return ecdf;
        };

        double d_max = 0.0;

        for (auto [i, j, cdf1, cdf2, ecdf1, ecdf2] {std::tuple{size_t(0), size_t(0), 0., 0., computeECDF(sample1), computeECDF(sample2) }};
            i < ecdf1.size() || j < ecdf2.size();)
        {
            if (i < ecdf1.size() && (j == ecdf2.size() || ecdf1[i].first <= ecdf2[j].first)) {
                cdf1 = ecdf1[i].second;
                ++i;
            }
            else {
                cdf2 = ecdf2[j].second;
                ++j;
            }

            d_max = std::max(d_max, std::abs(cdf1 - cdf2));
        }

        // Compute p-value using Kolmogorov-Smirnov distribution
        auto n1 = sample1.size();
        auto n2 = sample2.size();
        auto en_square = static_cast<double>(n1 * n2) / (n1 + n2);
        auto p_value = std::min(1.0, 2.0 * std::exp(-2.0 * en_square * d_max * d_max));

        return { d_max, p_value };
    }

    //--------------------------------------------------------------------------------------------
    namespace detail {
        // Helper function: approximation of the inverse error function (erfinv)
        inline auto erfinv(auto x)
        {
            const auto a = 0.147; // Approximation constant
            auto ln_part = std::log(1 - x * x);
            auto first_part = 2 / (std::numbers::pi * a) + ln_part / 2;
            auto second_part = ln_part / a;

            return std::copysign(std::sqrt(std::sqrt(first_part * first_part - second_part) - first_part), x);
        }

        // Helper function: normal quantile function (percent-point function)
        inline auto normal_quantile(auto p) { return std::sqrt(2) * erfinv(2 * p - 1); }
    }

    //--------------------------------------------------------------------------------------------
    // Shapiro-Wilk test function return W statistic and p-value
    template <std::ranges::sized_range Range>
        requires std::floating_point<std::ranges::range_value_t<Range>>
    auto shapiro_wilk_test(const Range& data) -> std::pair<double, double> 
    {
        auto n = std::ranges::size(data);
        util::gbassert(n >= 3, "Sample size must be at least 3.");

        // Sort data into a vector
        std::vector<double> sorted_data(data.begin(), data.end());
        std::ranges::sort(sorted_data);

        // Compute expected normal order statistics
        std::vector<double> m(n);
        for (std::size_t i = 0; i < n; ++i) {
            double pi = (i + 1.0 - 0.375) / (n + 0.25);
            m[i] = detail::normal_quantile(pi);
        }

        // Compute coefficients (a) using m and normalization
        auto sum_m2 = std::accumulate(m.begin(), m.end(), 0.0, [](auto sum, auto val) {
            return sum + val * val;
            });
        std::vector<double> a(n);
        for (std::size_t i = 0; i < n; ++i) {
            a[i] = m[i] / std::sqrt(sum_m2);
        }

        // Compute mean of data
        auto mean = std::accumulate(sorted_data.begin(), sorted_data.end(), 0.0) / n;

        // Calculate W statistic
        auto numerator = 0.0, denominator = 0.0;
        for (std::size_t i = 0; i < n; ++i) {
            numerator += a[i] * (sorted_data[i] - mean);
            denominator += std::pow(sorted_data[i] - mean, 2);
        }
        numerator = std::pow(numerator, 2);
        auto w = numerator / denominator;

        // Approximate p-value (simple approximation)
        auto p_value = 1.0 - std::exp(-1.2725 * std::pow(w - 1.0, 2));

        return { w, p_value };
    }

}
