//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <chrono>
#include <sstream>
#include <thread>

namespace gb::yadro::util
{
    //-------------------------------------------------------------------------
    // get time stamp for specified time zone (current zone by default)
    // e.g. time_stamp("UTC"), time_stamp("America/New_York")
    inline auto time_stamp(std::string_view zone = std::chrono::current_zone()->name())
    {
        using namespace std::chrono;
        try {
            return std::format("[{:%F %T}][pid: {}, tid: {}]", zoned_time{ zone, system_clock::now() },
                ::_getpid(), std::this_thread::get_id());
        }
        catch (std::exception&)
        {
            return std::format("[invalid time zone: {}][pid: {}, tid: {}]", zone, ::_getpid(), std::this_thread::get_id());
        }
    }
    //-------------------------------------------------------------------------
    // Delphi DateTime conversion
    inline constexpr auto datetime_to_chrono(double datetime) 
    {
        using namespace std::chrono;
        // Add the duration to the TDateTime epoch to get the system_clock time_point
        return sys_days{ December / 30 / 1899 } + duration_cast<system_clock::duration>(
            duration<double, std::ratio<86400>>(datetime));
    }

    //-------------------------------------------------------------------------
    inline std::tm unpack_time(std::chrono::time_point<std::chrono::system_clock> tp = std::chrono::system_clock::now())
    {
        std::time_t tp_c = std::chrono::system_clock::to_time_t(tp);
        return *std::localtime(&tp_c);
    }

    //-------------------------------------------------------------------------
    inline std::chrono::system_clock::time_point to_time_point(int year, int month, int day) {
        return std::chrono::sys_days(std::chrono::year(year) / month / day);
    }

    //-------------------------------------------------------------------------
    // ISO 8601: https://en.wikipedia.org/wiki/ISO_week_date
    // online calendar: https://planetcalc.com/8540/
    inline constexpr auto week_of_year(int y, int m, int d) -> std::tuple<int, int, int> // {year, week, day-of-week}
    {
        using namespace std::chrono;
        constexpr int common_year[] = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
        constexpr int leap_year[] = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };
        auto normalize = [](year_month_day ymd) {ymd += months{ 0 }; return year_month_day{ sys_days{ymd} }; };
        auto is_leap = y % 4 == 0 && y % 100 != 0 || y % 400 == 0;
        auto doy = (is_leap ? leap_year[m - 1] : common_year[m - 1]) + d;
        auto ymd = year(y) / m / d;
        auto dow = weekday(ymd).iso_encoding();
        auto woy = (10 + doy - dow) / 7;
        
        if (woy == 0)
            return { y - 1, std::get<1>(week_of_year(y - 1, 12, 31)), dow };

        if (woy == 53 && weekday(year(y) / 12 / 31) != Thursday && weekday(year(y - 1) / 12 / 31) != Wednesday)
            return { y + 1, 1, dow };
        
        return { y, woy, dow };
    }
}
