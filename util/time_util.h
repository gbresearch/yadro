//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <chrono>
#include <sstream>
#include <thread>

namespace gb::yadro::util
{
    //-------------------------------------------------------------------------
    inline auto time_stamp()
    {
        using namespace std::chrono_literals;
        using namespace std::chrono;
        auto now = system_clock::now();
        auto tstamp{ system_clock::to_time_t(now) };
        auto ms = duration_cast<milliseconds>(now.time_since_epoch()) % 1000;

        return (std::ostringstream{} << "[" << std::put_time(std::localtime(&tstamp), "%F %T")
            << '.' << std::setfill('0') << std::setw(3) << ms.count()
            << "] [pid: " << ::_getpid() << ", tid: " << std::this_thread::get_id() << "]").str();
    }

    //-------------------------------------------------------------------------
    // DateTime conversion
    inline auto datetime_to_chrono(double datetime)
    {
        using namespace std::chrono_literals;
        auto days = unsigned(datetime);
        auto hours = unsigned((datetime - days) * 24);
        auto mins = unsigned(((datetime - days) * 24 - hours) * 60);
        auto secs = std::lround((((datetime - days) * 24 - hours) * 60 - mins) * 60);
        return std::chrono::sys_days{ 1899y / 12 / 30 } + std::chrono::days(days)
            + std::chrono::hours(hours)
            + std::chrono::minutes(mins)
            + std::chrono::seconds(secs);
    }

}
