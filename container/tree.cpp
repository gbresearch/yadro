//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include "tree.h"
#include <iostream>

using namespace gb::yadro::container;

template<class Tree>
void calls(Tree& t)
{
    t.get_value(0) = typename Tree::data_t{};
    t.insert_child(0, t.get_value(0));
    t.insert_child(0);
    t.insert_after_sibling(1, t.get_value(0));
    t.detach_subtree(0);
    t.delete_subtree(1);
    t.copy_subtree(0, 1);
    t.copy_subtree_after_sibling(1, 10);
    t.copy_children(0, 1);
    t.move_subtree(0, 1);
    t.move_subtree_after_sibling(1, 20);
    t.move_children(12, 13);
    t.find_ancestor(100, [](auto n) { return n == 5; });
    t.find_child(100, [](auto n) { return n == 5; });
    t.find_sibling(100, [](auto n) { return n == 5; });
    t.find_depth_first(100, [](auto n) { return n == 5; });
    t.find_breadth_first(100, [](auto n) { return n == 5; });
    t.foreach_child(100, [](auto n) { return n == 5; });
    t.foreach_child(100, [&](auto n) { std::cout << n; });
    t.foreach_sibling(100, [](auto n) { return n == 5; });
    t.foreach_sibling(100, [&](auto n) { std::cout << n; });
    t.foreach_depth_first(100, [](auto n) { return n == 5; });
    t.foreach_depth_first(100, [&](auto n) { std::cout << n; });
    t.foreach_breadth_first(100, [](auto n) { return n == 5; });
    t.foreach_breadth_first(100, [&](auto n) { std::cout << n; });
}

void test()
{
    indexed_tree<int> tint;
    static_assert(tint.has_data);
    calls(tint);
    indexed_tree<void> tvoid;
    static_assert(!tvoid.has_data);
    indexed_tree<std::string> tstr;
    static_assert(tstr.has_data);
    static_assert(std::is_class_v<std::string>);
    calls(tstr);
}
