//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include "tensor.h"

namespace gb::yadro::container
{
    template<class T, template<class...> class C>
    concept instantiation_of = requires { C{ std::declval<T>() }; };

    template<class T, std::size_t Rows, std::size_t Columns>
    struct matrix;

    //---------------------------------------------------------------------------------------------
    template<class Matrix>
    struct minor_view
    {
        using matrix_type = std::remove_cvref_t<Matrix>;
        static_assert(matrix_type::Rows > 1);
        static_assert(matrix_type::Columns > 1);
        static constexpr auto Rows = matrix_type::Rows - 1;
        static constexpr auto Columns = matrix_type::Columns - 1;
        using data_type = typename matrix_type::data_type;

        minor_view(Matrix&& m, std::size_t row, std::size_t col)
            : _matrix(std::forward<Matrix>(m)), _row(row), _col(col)
        {
        }

        auto operator()(std::size_t row, std::size_t col) const
        {
            if (row >= _row)
                ++row;
            if (col >= _col)
                ++col;
            return _matrix(row, col);
        }

        auto to_matrix() const
        {
            matrix< data_type, Rows, Columns> result;
            for (std::size_t row = 0; row < Rows; ++row)
                for (std::size_t col = 0; col < Columns; ++col)
                    result(row, col) = (*this)(row, col);
            return result;
        }

    private:
        Matrix _matrix;
        std::size_t _row, _col;
    };

    //---------------------------------------------------------------------------------------------
    template<class T, std::size_t R, std::size_t C>
    struct matrix : static_tensor<T, R, C>
    {
        using data_type = T;
        static constexpr auto Rows = R;
        static constexpr auto Columns = C;

        matrix(instantiation_of<minor_view> auto&& view) 
        {
            *this = view.to_matrix();
        }

        auto transpose() const
        {
            matrix<T, Columns, Rows> result;
            for (std::size_t row = 0; row < Rows; ++row)
                for (std::size_t col = 0; col < Columns; ++col)
                    result(col, row) = (*this)(row, col);
            return result;
        }
    };

    // VC 17.7.7 compiler bug: can't use auto in deduction guide
    // see: https://developercommunity.visualstudio.com/t/C-deduction-guide-fails-in-msvc-v19la/10565664
    template<instantiation_of<minor_view> View>
    matrix(View&& view) -> matrix<typename std::remove_cvref_t<View>::data_type, std::remove_cvref_t<View>::Rows, std::remove_cvref_t<View>::Columns>;

    inline auto determinant(auto&& m)
    {
        using m_type = std::remove_cvref_t<decltype(m)>;
        static_assert(m_type::Rows == m_type::Columns);
        static_assert(m_type::Rows != 0);

        if constexpr (m_type::Rows == 1)
            return m(0, 0);
        else
        {
            using data_type = typename m_type::data_type;
            data_type result{};
            for (std::size_t r = 0; r < m_type::Rows; ++r)
                for (std::size_t c = 0; c < m_type::Columns; ++c)
                {
                    auto sign = ((r ^ c) & 1) == 0 ? 1 : -1;
                    result += sign * m(r, c) * determinant(minor_view(m, r, c));
                }
            return result;
        }
    }
}
