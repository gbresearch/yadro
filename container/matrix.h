//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include "tensor.h"

namespace gb::yadro::container
{
    template<class M>
    struct matrix_traits
    {
        using matrix_type = std::remove_cvref_t<M>;
        using data_type = typename matrix_type::data_type;
    };

    template<class T, template<class...> class C>
    concept instantiation_of = requires { C{ std::declval<T>() }; };

    template<class M>
    concept matrix_c = requires {
        std::declval<M>()(std::declval<std::size_t>(), std::declval<std::size_t>());
        std::declval<M>().rows();
        std::declval<M>().columns();
        typename matrix_traits<M>;
    };

    //---------------------------------------------------------------------------------------------
    // minor view usually holds a reference to matrix unless it's a prvalue
    template<matrix_c Matrix>
    struct minor_view;

    //---------------------------------------------------------------------------------------------
    template<class T, std::size_t ...RowsColumns>
        requires (sizeof... (RowsColumns) == 0 || sizeof... (RowsColumns) == 2)
    struct matrix : tensor<T, RowsColumns...>
    {
        using data_type = T;
        using const_data_type = std::add_const_t<data_type>;
        using tensor_t = tensor<T, RowsColumns...>;
        using tensor_t::indexer;
        using tensor_t::tensor;
        using tensor_t::operator=;
        using tensor_t::is_compatible;

        constexpr auto rows() const { return indexer().dimension(0); }
        constexpr auto columns() const { return indexer().dimension(1); }

        template<matrix_c M>
        auto& operator= (const minor_view<M>& other)
        {
            gb::yadro::util::gbassert(rows() == other.rows());
            gb::yadro::util::gbassert(columns() == other.columns());
            for (std::size_t row = 0, rs = rows(); row != rs; ++row)
                for (std::size_t col = 0, cols = columns(); col != cols; ++col)
                    (*this)(row, col) = other(row, col);
            return *this;
        }

        // transform every element of matrix invoking transform_fn(row, col, value)
        void transform(std::invocable<std::size_t, std::size_t, const_data_type> auto&& transform_fn)
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
                for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
                {
                    auto& value = (*this)(row, col);
                    value = std::invoke(transform_fn, row, col, value);
                }
        }

        // transform every element of matrix invoking transform_fn(value)
        void transform(std::invocable< const_data_type> auto&& transform_fn)
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
                for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
                {
                    auto& value = (*this)(row, col);
                    value = std::invoke(transform_fn, value);
                }
        }

        // transform a single row invoking transform_fn(col, value)
        void transform_row(std::invocable<std::size_t, const_data_type> auto&& transform_fn, std::size_t row)
        {
            for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
            {
                auto& value = (*this)(row, col);
                value = std::invoke(transform_fn, col, value);
            }
        }

        // transform a single row invoking transform_fn(value)
        void transform_row(std::invocable<const_data_type> auto&& transform_fn, std::size_t row)
        {
            for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
            {
                auto& value = (*this)(row, col);
                value = std::invoke(transform_fn, value);
            }
        }

        // transform a single column invoking transform_fn(row, value)
        void transform_col(std::invocable<std::size_t, const_data_type> auto&& transform_fn, std::size_t col)
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
            {
                auto& value = (*this)(row, col);
                value = std::invoke(transform_fn, row, value);
            }
        }

        // transform a single column invoking transform_fn(value)
        void transform_col(std::invocable<const_data_type> auto&& transform_fn, std::size_t col)
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
            {
                auto& value = (*this)(row, col);
                value = std::invoke(transform_fn, value);
            }
        }

        // reduce matrix using reduce_fn(row, col, value, initial)
        template<class Initial>
        auto reduce(std::invocable<std::size_t, std::size_t, const_data_type, Initial> auto&& reduce_fn, Initial initial) const
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
                for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
                    initial = std::invoke(reduce_fn, row, col, (*this)(row, col), initial);
            
            return initial;
        }

        // reduce matrix using reduce_fn(value, initial)
        template<class Initial>
        auto reduce(std::invocable<const_data_type, Initial> auto&& reduce_fn, Initial initial) const
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
                for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
                    initial = std::invoke(reduce_fn, (*this)(row, col), initial);

            return initial;
        }

        // reduce a single row invoking reduce_fn(col, value, initial)
        template<class Initial>
        void reduce_row(std::invocable<std::size_t, const_data_type, Initial> auto&& reduce_fn, std::size_t row, Initial initial) const
        {
            for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
                initial = std::invoke(reduce_fn, col, (*this)(row, col), initial);

            return initial;
        }

        // reduce a single row invoking reduce_fn(value, initial)
        template<class Initial>
        void reduce_row(std::invocable<const_data_type, Initial> auto&& reduce_fn, std::size_t row, Initial initial) const
        {
            for (std::size_t col = 0, max_col = columns(); col < max_col; ++col)
                initial = std::invoke(reduce_fn, (*this)(row, col), initial);

            return initial;
        }

        // reduce a single column invoking reduce_fn(row, value, initial)
        template<class Initial>
        void reduce_col(std::invocable<std::size_t, const_data_type, Initial> auto&& reduce_fn, std::size_t col, Initial initial) const
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
                initial = std::invoke(reduce_fn, row, (*this)(row, col), initial);

            return initial;
        }

        // reduce a single column invoking reduce_fn(value, initial)
        template<class Initial>
        void reduce_col(std::invocable<const_data_type, Initial> auto&& reduce_fn, std::size_t col, Initial initial) const
        {
            for (std::size_t row = 0, max_row = rows(); row < max_row; ++row)
                initial = std::invoke(reduce_fn, (*this)(row, col), initial);

            return initial;
        }
    };

    template<class T, std::size_t columns>
    using row_t = matrix<T, std::size_t(1), columns>;

    template<class T, std::size_t rows>
    using column_t = matrix<T, rows, std::size_t(1)>;

    // VC 17.7.7: can't use auto in deduction guide
    // see: https://developercommunity.visualstudio.com/t/C-deduction-guide-fails-in-msvc-v19la/10565664
    //template<instantiation_of<minor_view> View>
    //matrix(View&& view) -> matrix<typename std::remove_cvref_t<View>::data_type>;

    //---------------------------------------------------------------------------------------------
    // minor view usually holds a reference to matrix unless it's a prvalue
    template<matrix_c Matrix>
    struct minor_view
    {
        using data_type = typename matrix_traits<Matrix>::data_type;

        constexpr auto rows() const { return _matrix.rows() - 1; }
        constexpr auto columns() const { return _matrix.columns() - 1; }

        constexpr
        minor_view(Matrix&& m, std::size_t row, std::size_t col)
            : _matrix(std::forward<Matrix>(m)), _row(row), _col(col)
        {
            gb::yadro::util::gbassert(m.rows() > 1);
            gb::yadro::util::gbassert(m.columns() > 1);
            gb::yadro::util::gbassert(row < m.rows());
            gb::yadro::util::gbassert(col < m.columns());
        }

        auto operator()(std::size_t row, std::size_t col) const
        {
            gb::yadro::util::gbassert(row < rows());
            gb::yadro::util::gbassert(col < columns());
            if (row >= _row)
                ++row;
            if (col >= _col)
                ++col;
            return _matrix(row, col);
        }

    private:
        Matrix _matrix;
        std::size_t _row, _col;
    };
    
    template<matrix_c Matrix>
    minor_view(Matrix&&, std::size_t, std::size_t) -> minor_view<Matrix>;
}
