//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <string>
#include <type_traits>
#include <ranges>

namespace gb::yadro::util
{
    //-------------------------------------------------------------------------
    // hash functions
    //-------------------------------------------------------------------------
    inline auto make_hash(const char* str) { return std::hash<std::string>{}(str); }
    inline auto make_hash(const wchar_t* str) { return std::hash<std::wstring>{}(str); }
    inline auto make_hash(const auto& v) requires requires{ std::hash<std::remove_cvref_t<decltype(v)>>{}(v); }
    { return std::hash<std::remove_cvref_t<decltype(v)>>{}(v); };
    // TODO: remove after experiment
    inline auto make_hash(unsigned v) { return v; };

    // combine hashes
    inline auto make_hash(const auto& v, const auto&... ts) requires(sizeof ...(ts) != 0);
    // pair, tuple, array
    inline constexpr auto make_hash(auto&& v) requires requires { std::get<0>(v); };
    // ranges
    inline auto make_hash(const std::ranges::common_range auto& r);

    // combine hashes
    inline auto make_hash(const auto& v, const auto&... ts) requires(sizeof ...(ts) != 0)
    {
        auto seed = make_hash(v);
        ((seed ^= make_hash(ts) + 0x9e3779b9 + (seed << 6) + (seed >> 2)), ...);
        return seed;
    }

    // ranges
    inline auto make_hash(const std::ranges::common_range auto& r)
    {
        auto seed = make_hash(0);
        for (auto&& v : r)
            seed = make_hash(seed, v);
        return seed;
    }

    // pair, tuple, array
    inline constexpr auto make_hash(auto&& v) requires requires { std::get<0>(v); }
    {
        return std::apply([](auto&&... t) { return make_hash(t...); }, v);
    }

#if defined(clang_p1061)
    // https://gcc.godbolt.org/z/sMdqMY4Yv
    // https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1061r5.html
    inline constexpr auto make_hash(auto&& t) requires (std::is_class_v<std::remove_cvref_t<decltype(t)>>)
    {
        auto [...a] = std::forward<decltype(t)>(t);
        return make_hash(a...);
    }
#endif

    using make_hash_t = decltype([](auto&& ...v) { return gb::yadro::util::make_hash(std::forward<decltype(v)>(v)...); });
}
