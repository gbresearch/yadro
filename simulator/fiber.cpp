//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include "../util/gbwin.h"
#include "../util/gberror.h"
#include "fiber.h"
#include "event.h"
#include "scheduler.h"

#ifdef GBWINDOWS

namespace gb::sim::fibers
{
    using namespace gb::yadro;
    
    //---------------------------------------------------------------------------------------------
    void __stdcall fiber_loop(void* f)
    {
        if (auto t = static_cast<fiber*>(f); t)
            t->execute();
    }

    //---------------------------------------------------------------------------------------------
    fiber::fiber(scheduler_t& scheduler, std::function<void()> call_back, size_t stack_size)
        : _scheduler(scheduler), _call_back(call_back), _finished(false)
    {
        _win_fiber = ::CreateFiber(stack_size, &fiber_loop, this);
        util::gbassert(_win_fiber);
        resume();
    }
    //---------------------------------------------------------------------------------------------
    fiber::~fiber()
    {
        ::DeleteFiber(_win_fiber);
    }

    //---------------------------------------------------------------------------------------------
    void fiber::execute() 
    {
        while (!_finished) 
        {
            wait();
            _call_back();
        }
        suspend();
    }

    //---------------------------------------------------------------------------------------------
    void fiber::suspend() 
    {   // call from this fiber
        ::SwitchToFiber(_scheduler._main_fiber);
    }

    //---------------------------------------------------------------------------------------------
    void fiber::resume()
    {   // call from main fiber
        ::SwitchToFiber(_win_fiber);
    }

    //---------------------------------------------------------------------------------------------
    void fiber::finish() { _finished = true; }

    //---------------------------------------------------------------------------------------------
    void fiber::wait(event& e) 
    {
        e.bind_once([this] { resume(); });
        suspend();
    }

    //---------------------------------------------------------------------------------------------
    void fiber::wait(sim_time_t t) 
    {
        _scheduler.schedule([this] { resume(); }, t);
        suspend();
    }

    //---------------------------------------------------------------------------------------------
    auto fiber::get_sim_time() const -> sim_time_t
    {
        return _scheduler.current_time();
    }

    //---------------------------------------------------------------------------------------------
    fiber* this_fiber() 
    { 
        auto f = static_cast<fiber*>(GetFiberData());
        util::gbassert(f, "must be called from a fiber");
        return f;
    }
}

#endif