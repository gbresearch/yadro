//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <functional>

namespace gb::sim::fibers
{
    struct scheduler_t;
    struct event;
    using sim_time_t = std::uint64_t;

    struct fiber {
        // fibers are neither copiable nor movable
        fiber(const fiber&) = delete;
        auto& operator= (const fiber&) = delete;
        fiber(scheduler_t& scheduler, std::function<void()> call_back, size_t stack_size = 4096);
        ~fiber();
        void suspend();
        void resume();
        void finish();
        void execute();
        void wait(sim_time_t = 0);
        auto get_sim_time() const -> sim_time_t;
    private:
        scheduler_t& _scheduler;
        std::function<void()> _call_back;
        bool _finished{ false };
        void* _win_fiber;
    };

    //---------------------------------------------------------------------------------------------
    // global functions
    fiber* this_fiber();
    inline sim_time_t get_sim_time() { return this_fiber()->get_sim_time(); }
    inline void finish() { this_fiber()->finish(); }

    // wait functions
    inline void wait(sim_time_t t = 0) { this_fiber()->wait(t); }

    // wait on event-like type
    inline void wait(auto&& e) requires requires{ e.bind_once(nullptr); } 
    {
        e.bind_once([f = this_fiber()] { f->resume(); });
        this_fiber()->suspend();
    }

    // wait on multiple events or time periods in specified order
    inline void wait(auto&&...w) { (wait(decltype(w)(w)), ...); }
}
