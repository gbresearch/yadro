//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include "file_mutex.h"

#ifdef POSIX

namespace gb::yadro::util
{
    //-------------------------------------------------------------------------
    global_mutex::global_mutex(const char* file_name)
    {
        _handle = ::open(file_name, O_RDWR);
        if (_handle == invalid_handle)
            _handle = ::open(file_name, O_CREAT | O_RDWR, 0666);

        gbassert(_handle != invalid_handle);
    }

    //-------------------------------------------------------------------------
    global_mutex::~global_mutex()
    {
        if (_handle != invalid_handle)
        {
            ::close(_handle);
        }
    }

    //-------------------------------------------------------------------------
    void global_mutex::lock()
    {
        // acquire file lock
        struct flock lock;
        lock.l_type = F_WRLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = 0;
        lock.l_len = 0;

        gbassert(-1 != ::fcntl(_handle, F_SETLKW, &lock));
    }

    //-------------------------------------------------------------------------
    bool global_mutex::try_lock()
    {
        struct flock lock;
        lock.l_type = F_WRLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = 0;
        lock.l_len = 0;
        auto ret = ::fcntl(_handle, F_SETLK, &lock);

        gbassert(ret != -1 || errno == EAGAIN || errno == EACCES);

        return ret != -1;
    }

    //-------------------------------------------------------------------------
    void global_mutex::unlock()
    {
        struct flock lock;
        lock.l_type = F_UNLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = 0;
        lock.l_len = 0;
        gbassert(-1 != ::fcntl(_handle, F_SETLK, &lock));
    }

    //-------------------------------------------------------------------------
    void global_mutex::lock_shared()
    {
        struct flock lock;
        lock.l_type = F_RDLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = 0;
        lock.l_len = 0;
        gbassert(-1 != ::fcntl(_handle, F_SETLKW, &lock));
    }

    //-------------------------------------------------------------------------
    bool global_mutex::try_lock_shared()
    {
        struct flock lock;
        lock.l_type = F_RDLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = 0;
        lock.l_len = 0;
        auto ret = ::fcntl(_handle, F_SETLK, &lock);
        gbassert(ret != -1 || errno == = EAGAIN || errno == EACCES);
        return ret != -1;
    }

    //-------------------------------------------------------------------------
    void global_mutex::unlock_shared()
    {
        struct flock lock;
        lock.l_type = F_UNLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = 0;
        lock.l_len = 0;
        gbassert(-1 != ::fcntl(_handle, F_SETLK, &lock));
    }
}

#endif