//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <string>
#include <span>
#include <ranges>
#include <vector>

namespace gb::yadro::util
{
    constexpr auto base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    inline bool is_base64(unsigned char c) { return std::isalnum(c) || c == '+' || c == '/'; }
    //-------------------------------------------------------------------------
    // base64 encoding (binary to ASCII subset)
    inline std::string base64_encode(std::ranges::sized_range auto&& binary_buffer)
    {
        auto byte_span = std::as_bytes(std::span(binary_buffer));
        auto length = byte_span.size_bytes();
        auto buffer = byte_span.data();

        std::string encoded;
        encoded.reserve((length + 2) / 3 * 4);

        for (size_t i = 0; i < length; i += 3) {
            std::uint32_t group = std::to_integer<std::uint32_t>(buffer[i]) << 16;

            if (i + 1 < length)
                group |= std::to_integer<std::uint32_t>(buffer[i + 1]) << 8;
            if (i + 2 < length)
                group |= std::to_integer<std::uint32_t>(buffer[i + 2]);

            encoded += base64_chars[(group >> 18) & 0x3F];
            encoded += base64_chars[(group >> 12) & 0x3F];

            if (i + 1 < length)
                encoded += base64_chars[(group >> 6) & 0x3F];
            else
                encoded += '=';

            if (i + 2 < length)
                encoded += base64_chars[group & 0x3F];
            else
                encoded += '=';
        }

        return encoded;
    }

    //-------------------------------------------------------------------------
    // base64 decoding, returns vector<unsigned char>
    inline auto base64_decode(const std::string& encoded_string) 
    {
        std::vector<unsigned char> ret;

        int i = 0;
        unsigned char char_array_4[4], char_array_3[3];

        for (std::size_t in_len = encoded_string.size(), idx = 0;
            --in_len && (encoded_string[idx] != '=') && is_base64(encoded_string[idx]);)
        {
            char_array_4[i++] = encoded_string[idx]; 
            ++idx;
            if (i == 4) 
            {
                for (i = 0; i < 4; i++)
                    char_array_4[i] = static_cast<unsigned char>(std::string_view(base64_chars).find(char_array_4[i]));

                char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
                char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
                char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];

                for (i = 0; (i < 3); i++)
                    ret.push_back(char_array_3[i]);
                i = 0;
            }
        }

        if (i) 
        {
            for (auto j = i; j < 4; j++)
                char_array_4[j] = 0;

            for (auto j = 0; j < 4; j++)
                char_array_4[j] = static_cast<unsigned char>(std::string_view(base64_chars).find(char_array_4[j]));

            char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
            char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
            char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];

            for (auto j = 0; (j < i - 1); j++) ret.push_back(char_array_3[j]);
        }

        return ret;
    }

    //-------------------------------------------------------------------------
    // tokenize string based on specified delimiter
    //-------------------------------------------------------------------------
    template<class T>
    inline auto tokenize(const std::basic_string<T>& input, T separator)
    {
        std::vector<std::basic_string<T>> tokens;
        std::basic_istringstream<T> token_stream(input);

        for (std::string token; std::getline(token_stream, token, separator);)
            tokens.push_back(token);

        return tokens;
    }

    //---------------------
    // span 3-way comparison
    template<class T1, std::size_t Extent1, class T2, std::size_t Extent2>
    auto compare(const std::span<T1, Extent1>& s1, const std::span<T2, Extent2>& s2) requires(std::three_way_comparable_with<T1, T2>)
    {
        using ordering_t = std::compare_three_way_result_t<T1, T2>;
        if (s1.size() < s2.size())
            return ordering_t::less;
        else if (s1.size() > s2.size())
            return ordering_t::greater;
        else for (std::size_t i = 0; i < s1.size(); ++i)
        {
            auto cmp = s1[i] <=> s2[i];
            if (std::is_neq(cmp))
                return cmp;
        }
        return ordering_t::equivalent;
    }

    //---------------------
    template<class CharT, class Traits>
    auto compare(const CharT* s1, const CharT* s2, std::size_t size1, std::size_t size2)
    {
        auto comp = Traits::compare(s1, s2, std::min(size1, size2));
        return comp < 0 ? std::weak_ordering::less
            : comp > 0 ? std::weak_ordering::greater
            : size1 < size2 ? std::weak_ordering::less
            : size1 > size2 ? std::weak_ordering::greater
            : std::weak_ordering::equivalent;
    }

    //-------------------------------------------------------------------------
    constexpr auto strings_equal(const char* s1, const char* s2)
    {
        return std::char_traits<char>::length(s1) ==
            std::char_traits<char>::length(s2) &&
            std::char_traits<char>::compare(
                s1, s2, std::char_traits<char>::length(s1)) == 0;
    }

}