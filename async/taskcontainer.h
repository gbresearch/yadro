//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once

#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <future>


namespace gb::yadro::async
{
    //---------------------------------------------------------------------
    template<class T, class Container>
    class task_container;

    //---------------------------------------------------------------------
    // specialization for std::queue
    //---------------------------------------------------------------------
    template<class T>
    class task_container<T, std::queue<T>>
    {
        std::queue<T> _tasks;
    public:
        using value_type = T;
        auto size() const { return _tasks.size(); }
        auto empty() const { return _tasks.empty(); }
        void clear() { _tasks = std::queue<T>{}; }
        value_type dequeue()
        {
            auto top = std::move(_tasks.front());
            _tasks.pop();
            return top;
        }
        template<class V>
        void enqueue(V&& v)
        {
            _tasks.emplace(std::forward<V>(v));
        }
    };

    template<class T> using task_queue = task_container<T, std::queue<T>>;

    //---------------------------------------------------------------------
    // specialization for std::priority_queue
    //---------------------------------------------------------------------
    template<class T, class Compare>
    class task_container<T, std::priority_queue<T, std::vector<T>, Compare>>
    {
        std::priority_queue<T, std::vector<T>, Compare> _tasks;
    public:
        using value_type = T;
        auto size() const { return _tasks.size(); }
        auto empty() const { return _tasks.empty(); }
        void clear() { _tasks = std::priority_queue<T, std::vector<T>, Compare>{}; }
        value_type dequeue()
        {
            auto top = std::move(_tasks.top());
            _tasks.pop();
            return top;
        }
        template<class V>
        void enqueue(V&& v)
        {
            _tasks.emplace(std::forward<V>(v));
        }
    };

    template<class T, class Compare> using task_priority_queue = task_container<T, std::priority_queue<T, std::vector<T>, Compare>>;

    //---------------------------------------------------------------------
    // specialization for std::stack
    //---------------------------------------------------------------------
    template<class T>
    class task_container<T, std::stack<T>>
    {
        std::stack<T> _tasks;
    public:
        using value_type = T;
        auto size() const { return _tasks.size(); }
        auto empty() const { return _tasks.empty(); }
        void clear() { _tasks = std::stack<T>{}; }
        value_type dequeue()
        {
            auto top = std::move(_tasks.top());
            _tasks.pop();
            return top;
        }
        template<class V>
        void enqueue(V&& v)
        {
            _tasks.emplace(std::forward<V>(v));
        }
    };

    template<class T> using task_stack = task_container<T, std::stack<T>>;

    //---------------------------------------------------------------------
    // specialization for std::vector
    //---------------------------------------------------------------------
    template<class T>
    class task_container<T, std::vector<T>>
    {
        std::vector<T> _tasks;
    public:
        using value_type = T;
        auto size() const { return _tasks.size(); }
        auto empty() const { return _tasks.empty(); }
        void clear() { _tasks.clear(); }
        value_type dequeue()
        {
            auto top = std::move(_tasks.back());
            _tasks.pop_back();
            return top;
        }
        template<class V>
        void enqueue(V&& v)
        {
            _tasks.emplace_back(std::forward<V>(v));
        }
    };

    template<class T> using task_vector = task_container<T, std::vector<T>>;
}
