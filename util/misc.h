//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <functional>
#include <mutex>
#include <concepts>
#include <span>
#include <compare>
#include <utility>
#include <iostream>
#include <chrono>
#include <cmath>
#include <variant>

// miscellaneous utilities

namespace gb::yadro::util
{
    //-------------------------------------------------------------------------
    inline auto almost_equal = [](auto first, auto second, auto error) { return std::abs(first - second) <= error; };

    //-------------------------------------------------------------------------
    // hash functions
    //-------------------------------------------------------------------------
    inline auto make_hash(const char* str) { return std::hash<std::string>{}(str); }
    inline auto make_hash(const wchar_t* str) { return std::hash<std::wstring>{}(str); }
    inline auto make_hash(auto&& v) { return std::hash<std::remove_cvref_t<decltype(v)>>{}(v); };
    // TODO: remove after experiment
    inline auto make_hash(unsigned v) { return v; };

    inline auto make_hash(auto&& v, auto&&... ts)
    {
        auto seed = make_hash(v);
        if constexpr (sizeof ...(ts) != 0)
            ((seed ^= make_hash(ts) + 0x9e3779b9 + (seed << 6) + (seed >> 2)), ...);
        
        return seed;
    }

    // pair, tuple, array
    inline constexpr auto make_hash(auto&& v) requires requires { std::get<0>(v); }
    {
        return std::apply([](auto&&... t) { return make_hash(t...); }, v);
    }

    template<class ...T>
    inline constexpr auto make_hash(std::variant<T...>&& var)
    {
        return std::visit([](auto&& v) { return make_hash(v); }, var);
    }

#if defined(clang_p1061)
    // https://gcc.godbolt.org/z/sMdqMY4Yv
    // https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1061r5.html
    inline constexpr auto make_hash(auto&& t) requires (std::is_class_v<std::remove_cvref_t<decltype(t)>>)
    {
        auto [...a] = std::forward<decltype(t)>(t);
        return make_hash(a...);
    }
#endif

    using make_hash_t = decltype([](auto&& v) { return gb::yadro::util::make_hash(std::forward<decltype(v)>(v)); });
    //-------------------------------------------------------------------------
    // DateTime conversion
    inline auto datetime_to_chrono(double datetime)
    {
        using namespace std::chrono_literals;
        auto days = unsigned(datetime);
        auto hours = unsigned((datetime - days) * 24);
        auto mins = unsigned(((datetime - days) * 24 - hours) * 60);
        auto secs = std::lround((((datetime - days) * 24 - hours) * 60 - mins) * 60);
        return std::chrono::sys_days{ 1899y / 12 / 30 } + std::chrono::days(days)
            + std::chrono::hours(hours)
            + std::chrono::minutes(mins)
            + std::chrono::seconds(secs);
    }
    //-------------------------------------------------------------------------
    // resource locked with mutex from construction to destruction
    //-------------------------------------------------------------------------
    template<class T, class Mutex = std::mutex>
    struct locked_resource
    {
        // construct with owning mutex
        template<class...Args>
        constexpr explicit locked_resource(Args&&... args)
        {
            new(&t) T(std::forward<Args>(args)...);
        }

        // construct with mutex reference
        template<class...Args, class MM = Mutex, std::enable_if_t<std::is_reference_v<MM>, int> = 0>
        constexpr explicit locked_resource(MM& m, Args&&... args) : mtx(m)
        {
            std::scoped_lock _(mtx);
            new(&t) T(std::forward<Args>(args)...);
        }

        ~locked_resource()
        {
            t.~T();
        }

        template<class Function, class...Args>
        constexpr auto visit(Function&& f, Args&&...args)
        {
            return std::scoped_lock(mtx),
                std::invoke(std::forward<Function>(f), t, std::forward<Args>(args)...);
        }

        template<class Function, class...Args>
        constexpr auto visit(Function&& f, Args&&...args) const
        {
            return std::scoped_lock(mtx),
                std::invoke(std::forward<Function>(f), t, std::forward<Args>(args)...);
        }

        constexpr explicit operator bool() const { return std::scoped_lock(mtx), (t ? true : false); }

    private:
        Mutex mtx;
        union { T t; };
    };

    inline auto locked_call(auto fun, auto& ... mtx) requires (std::invocable<decltype(fun)>)
    {
        std::scoped_lock lock(mtx ...);
        return std::invoke(fun);
    }

    //-------------------------------------------------------------------------
    template<class OnExit>
    struct raii
    {
        raii(auto on_entry, OnExit on_exit) requires (std::invocable<decltype(on_entry)>)
            : on_exit(on_exit) {
            std::invoke(on_entry);
        }
        raii(OnExit on_exit) : on_exit(on_exit) { }
        ~raii() { std::invoke(on_exit); }
    private:
        OnExit on_exit;
    };

    template<class OnExit, class OnEntry>
    raii(OnEntry, OnExit)->raii<OnExit>;

    //-------------------------------------------------------------------------
    // retainer class exchanges value of the variable with the new_value
    // restores original value on destruction
    template<class T>
    struct retainer
    {
        template<class U>
        retainer(T& var, U&& new_value) : _var(var), _old_value(std::move(var)) 
        {
            var = std::forward<U>(new_value);
        }
        ~retainer() { _var = std::move(_old_value); }
    private:
        T& _var;
        T _old_value;
    };

    template<class T, class U>
    retainer(T&, U&&) -> retainer<T>;

    //---------------------
    // span 3-way comparison
    template<class T1, std::size_t Extent1, class T2, std::size_t Extent2>
    auto compare(const std::span<T1, Extent1>& s1, const std::span<T2, Extent2>& s2) requires(std::three_way_comparable_with<T1, T2>)
    {
        using ordering_t = std::compare_three_way_result_t<T1, T2>;
        if (s1.size() < s2.size())
            return ordering_t::less;
        else if (s1.size() > s2.size())
            return ordering_t::greater;
        else for (std::size_t i = 0; i < s1.size(); ++i)
        {
            auto cmp = s1[i] <=> s2[i];
            if (std::is_neq(cmp))
                return cmp;
        }
        return ordering_t::equivalent;
    }

    //---------------------
    template<class CharT, class Traits>
    auto compare(const CharT* s1, const CharT* s2, std::size_t size1, std::size_t size2) {
        auto comp = Traits::compare(s1, s2, std::min(size1, size2));
        return comp < 0 ? std::weak_ordering::less
            : comp > 0 ? std::weak_ordering::greater
            : size1 < size2 ? std::weak_ordering::less
            : size1 > size2 ? std::weak_ordering::greater
            : std::weak_ordering::equivalent;
    }

    //-------------------------------------------------------------------------
    constexpr auto strings_equal(const char* s1, const char* s2) {
        return std::char_traits<char>::length(s1) ==
            std::char_traits<char>::length(s2) &&
            std::char_traits<char>::compare(
                s1, s2, std::char_traits<char>::length(s1)) == 0;
    }
}
