//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once

// macros for concatenation
#define GM_MACRO_CONCAT_NO_EXPAND(A, B) A ## B
#define GM_MACRO_CONCAT(A, B) GM_MACRO_CONCAT_NO_EXPAND(A, B)

// macros for stringification
#define GM_MACRO_STRING_NO_EXPAND(A) #A
#define GM_MACRO_STRING(A) GM_MACRO_STRING_NO_EXPAND(A)

// macro for frequently used named scope timer, e.g. GB_TIMER(name, milliseconds);
#define GB_TIMER(name, time_unit) auto GM_MACRO_CONCAT(name, __LINE__) {\
    gb::yadro::util::global_timer_map_t<std::chrono::##time_unit>::get(GM_MACRO_STRING(GM_MACRO_CONCAT(name,__LINE__)),\
    [=](auto duration, auto count)\
    {\
        auto str = std::format("[TIMER] {}:{}, time: {} {}, count: {}\n", #name, __LINE__, duration.count(), \
            gb::yadro::util::get_duration_suffix<std::chrono::##time_unit>(), count);\
        printf(str.c_str());\
    }).make_scope_timer()}
