//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once

#include <memory>
#include <functional>
#include <vector>   
#include <new>

namespace gb::yadro::util
{
    //-------------------------------------------------------------------------
    // create_unique - make_unique missing overloads
    // clang bug: https://github.com/llvm/llvm-project/issues/106182
    // create a unique_ptr of template type S, derived from Base, returning unique_ptr<Base>
    template<class Base, template<class...> class S>
    inline auto create_unique(auto&&... args) -> std::unique_ptr<Base>
        requires(std::derived_from<decltype(S{ std::forward<decltype(args)>(args)... }), Base > )
    {
        using Type = std::remove_cvref_t<decltype(S{ std::forward<decltype(args)>(args)... }) > ;
        return std::make_unique<Type>(std::forward<decltype(args)>(args)...);
    }
    //---------------------------------------------------------------------------------------------
    // create uniq_ptr of template type S
    template<template<class...> class S>
    inline auto create_unique(auto&&... args)
    {
        using Type = std::remove_cvref_t<decltype(S{ std::forward<decltype(args)>(args)... }) > ;
        return std::make_unique<Type>(std::forward<decltype(args)>(args)...);
    }

    //---------------------------------------------------------------------------------------------
    // create unique_ptr of non-template type S, derived from Base
    template<class Base, std::derived_from<Base> S>
    inline auto create_unique(auto&&... args) -> std::unique_ptr<Base>
    {
        return std::make_unique<S>(std::forward<decltype(args)>(args)...);
    }

    //---------------------------------------------------------------------------------------------
    // same as unique_ptr, necessary for generic use of create_unique regardless of type S
    template<class S>
    inline auto create_unique(auto&&... args)
    {
        return std::make_unique<S>(std::forward<decltype(args)>(args)...);
    }

    //-------------------------------------------------------------------------
    template <class T, auto Alignment>
    struct aligned_allocator
    {
        using value_type = T;
        [[nodiscard]] constexpr T* allocate(std::size_t n)
        {
            return static_cast<T*>(
                ::operator new (sizeof(T) * n, std::align_val_t{ Alignment }));
        }

        constexpr void deallocate(T* p, std::size_t n)
        {
            ::operator delete (p, n, std::align_val_t{ Alignment });
        }

        constexpr auto operator==(const aligned_allocator&) const { return true; }

        template <typename U> struct rebind
        {
            using other = aligned_allocator<U, Alignment>;
        };
    };

    //-------------------------------------------------------------------------
    template <class T, auto Alignment>
    using aligned_vector = std::vector<T, aligned_allocator<T, Alignment>>;

    //-------------------------------------------------------------------------
    // make unique_ptr of an array, default initialized, using Allocator
    //-------------------------------------------------------------------------
    template <class T, class Allocator> 
    auto make_unique_array(std::size_t size)
    {
        return std::unique_ptr<T[], std::function<void(T*)>>(
            [=] {
                auto p = Allocator{}.allocate(size);
                std::uninitialized_default_construct_n(p, size);
                return p;
            }(),
                [=](T* p) {
                std::destroy_n(p, size);
                Allocator{}.deallocate(p, size);
            });
    }

    //-------------------------------------------------------------------------
    // make unique_ptr of an alligned array, default initialized
    //-------------------------------------------------------------------------
    template <class T, std::size_t Alignment>
    auto make_unique_array(std::size_t size)
    {
        return make_unique_array<T, aligned_allocator<T, Alignment>>(size);
    }

    //-------------------------------------------------------------------------
    // unique_ptr of an array of type T with a deleter
    //-------------------------------------------------------------------------
    template <class T>
    using unique_array = std::unique_ptr<T[], std::function<void(T*)>>;

    //-------------------------------------------------------------------------
    template <class T, std::size_t alignment, std::size_t size>
    struct aligned_array
    {
        static_assert(alignment% alignof(T) == 0);
        alignas(alignment) T data[size];
        constexpr T& operator[](std::size_t n) { return data[n]; }
        constexpr const T& operator[](std::size_t n) const { return data[n]; }
    };

}
