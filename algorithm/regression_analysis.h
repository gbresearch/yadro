//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <ranges>
#include <utility>
#include <functional>
#include <algorithm>
#include <numeric>
#include "../util/tuple_functions.h"
#include "genetic_optimization.h"

namespace gb::yadro::algorithm
{
    //----------------------------------------------------------------------------------------------
    // data is a range of tuple-like types, 
    // where get<0> is Y values and the rest get<N> are arguments to the function

    template<typename D>
    concept data_range = std::ranges::common_range<D> && util::tuple_like<decltype(*std::begin(std::declval<D>()))>;

    //----------------------------------------------------------------------------------------------
    // calculate a vector of residual values,
    // inputs: regression fuction, data range, and operator to be applied on Y values
    // type of the result data is the same as Y values

    constexpr auto residuals(auto fun, const data_range auto& data, auto op)
    {
        using y_type = std::remove_cvref_t<decltype(std::get<0>(*std::begin(data)))>;

        std::vector<y_type> result;
        result.reserve(std::size(data));

        std::ranges::transform(data, std::back_inserter(result), [&](auto&& d)
            {
                return std::invoke(op, std::get<0>(d),
                    std::apply([&](auto&& ...args) {
                        return std::invoke(fun, args...);
                        }, util::subtuple<1>(d)));
            });

        return result;
    }

    //----------------------------------------------------------------------------------------------
    // using std::minus<> as the Y values operator

    constexpr auto residuals(auto fun, const data_range auto& data)
    {
        return residuals(fun, data, std::minus<>{});
    }

    //----------------------------------------------------------------------------------------------
    // least squares optimization
    // function fun(p...) -> function(p..., x...)
    template<class ...ParameterTypes>
    auto least_squares_optimizer(auto fun, const data_range auto& data, std::tuple<ParameterTypes, ParameterTypes> ... min_max_parameters)
    {
        genetic_optimization_t opt([=, &data](auto&& ...params)
            {
                auto fn = std::invoke(fun, std::forward<decltype(params)>(params)...);
                auto&& v = residuals(fn, data);
                auto zero = static_cast<std::remove_reference_t<decltype(v[0])>>(0);
                return std::reduce(std::begin(v), std::end(v), zero, [](auto&& v1, auto&& v2) { return v1 + v2 * v2; });
            }, std::less<>{}, min_max_parameters ...);

        return opt;
    }

    //----------------------------------------------------------------------------------------------
    // least abs optimization
    // function fun(p...) -> function(p..., x...)
    template<class ...ParameterTypes>
    auto least_abs_optimizer(auto fun, const data_range auto& data, std::tuple<ParameterTypes, ParameterTypes> ... min_max_parameters)
    {
        genetic_optimization_t opt([=, &data](auto&& ...params)
            {
                auto fn = std::invoke(fun, std::forward<decltype(params)>(params)...);
                auto&& v = residuals(fn, data);
                auto zero = static_cast<std::remove_reference_t<decltype(v[0])>>(0);
                return std::reduce(std::begin(v), std::end(v), zero, [](auto&& v1, auto&& v2) { return v1 + std::abs(v2); });
            }, std::less<>{}, min_max_parameters ...);

        return opt;
    }
}
