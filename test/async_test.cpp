//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2023, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include <chrono>
#include <thread>
#include "../util/gbtest.h"
#include "../async/threadpool.h"


namespace
{
    using namespace gb::yadro::util;
    using namespace gb::yadro::async;

    GB_TEST(yadro, async_test)
    {
        using namespace std::chrono_literals;

        threadpool tp;
        auto f1 = tp([] 
            { 
                auto sum{ 0. }; 
                for (auto i = 0u; i < 100'000'000; ++i) ++sum; 
                std::this_thread::sleep_for(100ms);  
                return sum; 
            }).share();
        
        auto f2 = tp([](auto init) 
            { 
                for (auto i = 0u; i < 100'000'000; ++i) ++init; 
                return init;
            }, 0.);

        auto f3 = tp.then([](auto init)
            {
                for (auto i = 0u; i < 100'000'000; ++i) --init;
                return init;
            }, f1);


        auto f = tp.then([](auto v1, auto v2, auto v3) { return v1 == v2 && v3 == 0; }, f1, std::move(f2), std::move(f3));
        gbassert(f.get());
    }
}
