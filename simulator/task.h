//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once
#include <coroutine>
#include <exception>

namespace gb::sim::coroutines
{
    struct sim_task;

    //---------------------------------------------------------------------------------------------
    inline sim_task forever(auto&& coro, auto&&... args)
    {
        for (;;)
            co_await coro(decltype(args)(args)...);
    }

    //---------------------------------------------------------------------------------------------
    struct promise
    {
        struct {
            bool done{ false };
            std::coroutine_handle<> suspended_awaiter{};

            bool await_ready() noexcept {
                // We always suspend in the final awaiter to avoid the promise being destructed
                return false;
            }

            std::coroutine_handle<> await_suspend(std::coroutine_handle<>) noexcept {
                return suspended_awaiter ? std::move(suspended_awaiter) : std::noop_coroutine();
            }

            void await_resume() noexcept {}
        } final_awaiter;

        sim_task get_return_object();
        std::suspend_never initial_suspend() noexcept { return {}; }

        // return a final awaiter that's responsible for invoking continuation coroutines
        auto& final_suspend() noexcept { return final_awaiter; }

        void return_void() {}
        void unhandled_exception() noexcept { _current_exception = std::current_exception(); }
        auto get_exception() const { return _current_exception; }
    private:
        std::exception_ptr _current_exception{};
    };

    //---------------------------------------------------------------------------------------------
    struct sim_task
    {
        using promise_type = promise;
        promise_type& promise;

        ~sim_task() { 
            if (await_ready() && promise.final_awaiter.suspended_awaiter)
                promise.final_awaiter.suspended_awaiter.destroy();
        }
        bool await_ready() noexcept {
            return promise.final_awaiter.done;
        }
        void await_suspend(std::coroutine_handle<promise_type> suspended) {
            promise.final_awaiter.suspended_awaiter = std::move(suspended);
        }
        void await_resume() {}
    };

    inline sim_task promise::get_return_object() { return { *this }; }

}
