//-----------------------------------------------------------------------------
//  Copyright (C) 2024, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#pragma once

#include <vector>
#include <exception>
#include <iostream>
#include <functional>
#include <queue>
#include <map>
#include <string>
#include <utility>

#include "task.h"
#include "fiber.h"

namespace gb::sim::coroutines
{
    //---------------------------------------------------------------------------------------------
    struct event
    {
        void trigger()
        {
            for (auto cancellable = std::move(_cancellable); auto && [_, f] : cancellable) { std::invoke(f); }
            for (auto&& cb : _call_backs) std::invoke(cb);
            for (auto handles = std::move(_handles); auto h : handles) { h.resume(); }
        }

        void schedule(auto& scheduler, auto sim_time = 0)
        {
            scheduler([this] { this->trigger(); }, sim_time);
        }

        void bind(auto&& ... functions) { (_call_backs.push_back(decltype(functions)(functions)), ...); }
        void bind_cancellable(void* p, auto&& f) { _cancellable[p] = decltype(f)(f); }
        void cancel_wait(void* p) { _cancellable.erase(p); }

        void await_suspend(auto h) { _handles.push_back(h); }
        void await_resume() {}
        auto await_ready() { return false; }

    private:
        std::map<void*, std::function<void()>> _cancellable;
        std::vector<std::function<void()>> _call_backs;
        std::vector<std::coroutine_handle<>> _handles;
    };

    //---------------------------------------------------------------------------------------------
    template<class E1, class E2>
    struct any_event
    {
        any_event(E1&& e1, E2&& e2) : _e1(std::forward<E1>(e1)), _e2(std::forward<E2>(e2))
        {
        }
        void trigger() { }
        void await_suspend(auto h)
        {
            _handle = h;
            // the first call back resumes coroutine and cancells the other
            _e1.bind_cancellable(this, [this] { if (_handle) { _e2.cancel_wait(this);  _handle.resume(); } });
            _e2.bind_cancellable(this, [this] { if (_handle) { _e1.cancel_wait(this); _handle.resume(); } });
        }
        void await_resume() { _handle = nullptr; }
        auto await_ready() { return _e1.await_ready() && _e2.await_ready(); }

    private:
        E1 _e1;
        E2 _e2;
        std::coroutine_handle<> _handle;
    };

    template<class E1, class E2>
    any_event(E1&&, E2&&) -> any_event<E1, E2>;

    template<class E1, class E2>
        requires requires { std::declval<E1>().trigger(); std::declval<E2>().trigger(); }
    auto operator| (E1&& e1, E2&& e2) { return any_event(std::forward<E1>(e1), std::forward<E2>(e2)); }

    //---------------------------------------------------------------------------------------------
    template<class E1, class E2>
    struct and_event
    {
        and_event(E1&& e1, E2&& e2) : _e1(std::forward<E1>(e1)), _e2(std::forward<E2>(e2)) {}
        void trigger() { }
        void await_suspend(auto h)
        {
            suspender(h);
        }
        void await_resume() { }
        auto await_ready() { return _e1.await_ready() && _e2.await_ready(); }
        task<> suspender(auto h)
        {
            co_await _e1;
            co_await _e2;
            h.resume();
        }

    private:
        E1 _e1;
        E2 _e2;
    };

    template<class E1, class E2>
    and_event(E1&&, E2&&) -> and_event<E1, E2>;

    template<class E1, class E2>
        requires requires { std::declval<E1>().trigger(); std::declval<E2>().trigger(); }
    auto operator& (E1&& e1, E2&& e2) { return and_event(std::forward<E1>(e1), std::forward<E2>(e2)); }

    //---------------------------------------------------------------------------------------------
    struct empty_event
    {
        void trigger() {}
        void schedule(auto& scheduler, auto sim_time = 0) {}
        void bind(auto&& ... call_backs) {}
        void await_suspend(auto h) {}
        void await_resume() {}
        auto await_ready() { return true; }
    };
}

//-------------------------------------------------------------------------------------------------
namespace gb::sim::fibers
{
    //---------------------------------------------------------------------------------------------
    struct event
    {
        void trigger()
        {
            for (auto&& cb : _call_backs) std::invoke(cb);
            while (!_cancellable.empty()) { 
                std::invoke(_cancellable.extract(std::get<0>(*_cancellable.begin())).mapped(), *this); 
            }
            for (auto c_once = std::move(_call_once); auto && f : c_once) { std::invoke(f); }
        }

        void schedule(auto& scheduler, auto sim_time = 0)
        {
            scheduler([this] { this->trigger(); }, sim_time);
        }

        void bind(auto&& ... functions) { (_call_backs.push_back(decltype(functions)(functions)), ...); }
        void bind_once(auto&& ... functions) { (_call_once.push_back(decltype(functions)(functions)), ...); }
        void bind_cancellable(void* p, auto&& f) requires requires{std::invoke(f, *this); } { _cancellable[p] = decltype(f)(f); }
        void bind_cancellable(void* p, auto&& f) requires requires{std::invoke(f); } { _cancellable[p] = [f = decltype(f)(f)](event&) { std::invoke(f); }; }
        void cancel_wait(void* p) { _cancellable.erase(p); }
        void cancel_wait() { _cancellable.clear(); _call_once.clear(); }

    private:
        std::map<void*, std::function<void(event&)>> _cancellable;
        std::vector<std::function<void()>> _call_backs;
        std::vector<std::function<void()>> _call_once;
    };

    //---------------------------------------------------------------------------------------------
    // waiter on list of events, resumes on first triggered event and cancells all callbacks
    template<class ...E>
    struct any_event
    {
        any_event(E&& ...e) : _events(std::forward<E>(e)...)
        {
        }
        
        void bind_once(auto call_back)
        {
            bind_cancellable(this, [this, call_back]
                {
                    cancel_wait(this);
                    std::invoke(call_back);
                });
        }
        
        void bind_cancellable(void* p, auto&& f)
        {
            std::apply([=, this](auto& ...e)
                {
                    (e.bind_cancellable(p, f), ...);
                }, _events);
        }
        
        void cancel_wait(void* p) 
        { 
            std::apply([=](auto& ...e)
                {
                    (e.cancel_wait(p), ...);
                }, _events);
        }
    private:
        std::tuple<E...> _events;
    };

    template<class ...E>
    inline void wait(any_event<E...>&& ae) 
    {
        ae.bind_once([f = this_fiber()] { f->resume(); });
        this_fiber()->suspend();
    }

    inline void wait_any(auto&& ... e)
    {
        wait(any_event{ decltype(e)(e)... });
    }

    template<class ...E>
    any_event(E&&...) -> any_event<E...>;

    template<class E1, class E2>
        requires requires { std::declval<E1>().bind_cancellable(0,0); std::declval<E2>().bind_cancellable(0, 0); }
    auto operator| (E1&& e1, E2&& e2) { return any_event(std::forward<E1>(e1), std::forward<E2>(e2)); }

    //---------------------------------------------------------------------------------------------
    // waiter for all events to be triggered in any order
    template<class ...E>
    struct and_event
    {
        and_event(E&& ...e) : _events(std::tuple{ std::tuple<E, bool>{ std::forward<E>(e), false }... }) {}
        void bind_once(auto call_back)
        {
            std::apply([&](auto&& ...ep)
                {
                    (std::get<0>(ep).bind_cancellable(this, [call_back, this, &ep]
                        {
                            std::get<1>(ep) = true;
                            if (all_ready())
                                std::invoke(call_back);
                        }), ...);
                }, _events);
        }

        void bind_cancellable(void* p, auto&& f)
        {
            std::apply([&](auto&& ...ep)
                {
                    (std::get<0>(ep).bind_cancellable(p, f), ...);
                }, _events);
        }

        bool all_ready() const
        {
            return std::apply([](auto&& ...ep)
                {
                    return (std::get<1>(ep) && ...);
                }, _events);
        }

        void cancel_wait(void* p)
        {
            std::apply([=](auto& ...e)
                {
                    (std::get<0>(e).cancel_wait(p), ...);
                }, _events);
        }

    private:
        std::tuple<std::tuple<E, bool>...> _events;
    };

    template<class ...E>
    inline void wait(and_event<E...>&& ae) 
    { 
        ae.bind_once([f = this_fiber()] { f->resume(); });
        this_fiber()->suspend();
    }

    template<class ...E>
    inline void wait_all(E&& ...e)
    {
        wait(and_event{ decltype(e)(e)... });
    }

    template<class ...E>
    and_event(E&& ...) -> and_event<E...>;

    template<class E1, class E2>
        requires requires { std::declval<E1>().bind_cancellable(0, 0); std::declval<E2>().bind_cancellable(0, 0); }
    auto operator& (E1&& e1, E2&& e2) { return and_event(std::forward<E1>(e1), std::forward<E2>(e2)); }

    //---------------------------------------------------------------------------------------------
    struct empty_event
    {
        void trigger() {}
        void schedule(auto& scheduler, auto sim_time = 0) {}
        void bind(auto&& ... call_backs) {}
    };
}
